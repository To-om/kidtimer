#!/bin/bash
# Restrict kids computer access to specific hours and total time.
# By: Michael Groves - grover66_at_gmail_dot_com

INSTALL_PREFIX="/opt"
BASE_DIR="${INSTALL_PREFIX}/kidtimer"
TIME_DIR="${BASE_DIR}/time"
SCHEDULE_DIR="${BASE_DIR}/schedule"
CONFIG_DIR="${BASE_DIR}/etc"
LOG_FILE="${BASE_DIR}/log"
LOCALE_DIR="${BASE_DIR}/locale"
ICONS_DIR="${BASE_DIR}/icons"
REPOSITORY_URL="https://raw.githubusercontent.com/To-om/kidtimer/master/"
FILES=(
	"bin/kidtimer"
	"icons/kidtimer-1.png"
	"icons/kidtimer-2.png"
	"icons/kidtimer-3.png"
	"icons/kidtimer-4.png"
	"icons/kidtimer-5.png"
	"locale/de_CH.UTF-8"
	"locale/de_DE.UTF-8"
	"locale/en_US.UTF-8"
	"locale/es_ES.UTF-8"
	"locale/fr_BE.UTF-8"
	"locale/fr_CA.UTF-8"
	"locale/fr_CH.UTF-8"
	"locale/fr_FR.UTF-8"
	"locale/it_IT.UTF-8"
	"schedule/blank")
touch ${CONFIG_DIR}/kid.list
KIDS=($(cat "${CONFIG_DIR}/kid.list" | sort -u))
[ ! -e ${LOCALE_DIR}/${LANG} ] && LANG="en_US.UTF-8"

case $(date +%u) in
	6|7)	is_weekend() { return 0 } ;;
	*)		is_weekend() { return 1 } ;;
esac

################# Subroutines ##################
################################################


# Check if user is logged
# This method ( users ) to determine who is logged in is a kludge.
# It ignores locked screens (screensaver active) and switched user states.
#
# shows: nothing
# returns:
#   0 if user is logged
#   1 if user is not logged
is_logged() {
	local KID=$1

	users | grep -q ${KID}
}

# Check if user is configured for kidtimer
#
# shows: nothing
# returns:
#   0 if user is configured
#   1 if user is not configured
is_configured() {
	local KID=$1

	for	K in ${KIDS[@]}
	do
		[ ${K} = ${KID} ] && return 0
	done
	return 1
}

# Decrement TTL (time to live) in mins and return true if TTL > 0
#
# shows: nothing
# returns:
#   0 if TTL > 0
#   1 if TTL <= 0
update_ttl() {
	local KID=$1

	#more time
	local mfile=$(($(date +%s) / 10000))
	if [ -e /tmp/${mfile} ]; then
		rm -f /tmp/${mfile}
		reset_time ${KID}
	else
		# Normal mode is to decrement a minute
		local TTL=$(get_current_ttl ${KID})
		echo $(${TTL} - 1) > ${TIME_DIR}/${KID}.ttl
		[ ${TTL} -gt 0 ]
	fi
}

# Set TTL to the specified value
#
# shows: nothing
# returns: nothing
set_ttl() {
	local KID=$1
	local TTL=$2

	echo ${TTL} > ${TIME_DIR}/${KID}.ttl
}

# Show debug information
#
# shows: information on system
# returns: nothing
get_info() {
	COMMANDS=(
		"date"
		"find ${BASE_DIR} -print | sort"
		"cat ${CONFIG_DIR}/kid.list"
		"passwd -S -a"
		"grep '' ${SCHEDULE_DIR}/*"
		"grep '' ${TIME_DIR}/*"
		"cat /etc/cron.d/kidtimer"
		"cat /etc/lsb-release"
		"uname -a"
		"env")
	echo "kidtimer info"
	echo "---------------------------------------------"
	for CMD in ${COMMANDS[@]}
	do
		echo ${CMD}
		$(${CMD})
		echo "----"
	done
}

is_locked() {
	local KID=$1

	passwd ${KID} -S | grep -q '^[^ ]* L'
}

# Check user TTL and if access is allowed at this hour
#
# shows: nothing
# returns: nothing 
go_check() {
	local LOG=""
	for KID in ${KIDS[@]}
	do
		local DAILY_RESET=$(stat -c %y "${TIME_DIR}/${KID}.ttl" | grep -q "^$(date +%Y-%m-%d)" && echo "Y" || echo "N")
		local IS_LOGGED=$(is_logged ${KID} && echo "Y" || echo "N")
		local CURRENT_TTL=$(get_current_ttl ${KID})
		local IS_LOCKED=$(is_locked && echo "Y" || echo "N")
		local LOGOUT="N"
		local HOURLY_ALLOWED=$(is_hourly_allowed ${KID} && echo "Y" || echo "N")

		# New day means we reset the TTL
		[ ${DAILY_RESET} = "Y" ] && reset_time ${KID}

		# change TTL for logged in user and return remaining time
		if [ ${IS_LOGGED} = "Y" ]
		then
			update_ttl ${KID}

			if [ ${CURRENT_TTL} -le 5 -o ${HOURLY_ALLOWED} = "N" ]
			then
				go_logout ${KID}
				LOGOUT="Y"
			fi
		else
			if [ ${CURRENT_TTL} -gt 0 -a ${HOURLY_ALLOWED} = "Y" ]
			then [ ${IS_LOCKED} = "Y" ] && passwd ${KID} -u
			else [ ${IS_LOCKED} = "N" ] && passwd ${KID} -l
			fi
		fi
		echo $(date +"%F %T") KID=${KID} DAILY_RESET=${DAILY_RESET} IS_LOGGED=${IS_LOGGED} CURRENT_TTL=${CURRENT_TTL} IS_LOCKED=${IS_LOCKED} LOGOUT=${LOGOUT} HOURLY_ALLOWED=${HOURLY_ALLOWED} >> ${LOG_FILE}
	done
}

# Get the daily TTL for an user
#
# shows: user TTL
# returns: nothing
get_daily_ttl() {
	local KID=$1

	if is_weekend
	then cat ${SCHEDULE_DIR}/${KID} | awk '/^MAX/{ print $2 }'
	else cat ${SCHEDULE_DIR}/${KID} | awk '/^MAX/{ print $3 }'
	fi
}

# Get the remaining TTL for an user
#
# shows: user TTL
# returns: nothing
get_current_ttl() {
	local KID=$1

	if [ -e ${TIME_DIR}/${KID}.ttl ]
	then
		TTL=$(cat "${TIME_DIR}/${KID}.ttl")
		[ ${TTL} -lt 0 ] && TTL=0
	#first time for a user, create file, and set default TTL
	else
		TTL=$(get_daily_ttl ${KID})
		echo ${TTL} > ${TIME_DIR}/${KID}.ttl
	fi
	echo ${TTL}
}

# Cleanup user jobs
#
# shows: nothing
# returns: nothing
go_clean_jobs() {
	local KID=$1

	atq -q k | awk '{ print $1 }' | xargs atrm -q k
	rm -rf /tmp/kidtimer.shutdown.${KID} \
		/tmp/kidtimer.send*.bash.${KID} \
		/tmp/killall.bash.${KID}
}

# Determine if allowed to use computer during this schedule
#
# shows: nothing
# returns:
#   0 if user is allowed
#   1 if user is not allowed
is_hourly_allowed() {
	local KID=$1

	if [ -e ${SCHEDULE_DIR}/${KID} ]; then
		# Disable/Enable depending on if allowed during time of day
		local HOUR=`date +%H`
		if is_weekend
		then grep ^${HOUR} ${SCHEDULE_DIR}/${KID} | awk '{ print $2 }' | grep -qi y
		else grep ^${HOUR} ${SCHEDULE_DIR}/${KID} | awk '{ print $3 }' | grep -qi y
		fi
		return $?
	else
		return 0
	fi
}

# Logout an user
# Send 5 notifications (1 per minute) then kill all his processes
#
# shows: nothing
# returns: nothing
go_logout() {
	local KID=$1

	# only start this if they are logged in
	# schedule the shutdown if we haven't already
	if [ is_logged ${KID} -a ! -e /tmp/kidtimer.shutdown.${KID} ]; then
		go_send ${KID} 5
		go_send ${KID} 4
		go_send ${KID} 3
		go_send ${KID} 2
		go_send ${KID} 1
		go_killall ${KID}
		touch /tmp/kidtimer.shutdown.${KID}
	fi
}

# send notification to the user
#
# shows: nothing
# returns: nothing
go_send() {
	local KID=$1
	local T=$2
	local MESSAGE_ID=$((7-$T))
	local TEXT=$((6-$T))

	MSG="${KID}: $(message_locale ${MESSAGE_ID})"
	(for D in $(seq 0 10)
	do
		echo "su ${KID} -c 'DISPLAY=:$D notify-send -i /usr/local/kidtimer/icons/kidtimer-$TEXT.png ALERT \"$MSG\"'"
	done) | at now + ${T} minutes
	# Note you need the file /var/spool/cron/atjobs/.SEQ owned by daemon:daemon for at to work properly!!!
}


# schedule the kill of all processes of an user
#
# shows: nothing
# returns: nothing
go_killall() {
	local KID=$1

	at now + 6 minutes <<- EOF
		pkill -TERM -u ${KID}
		sleep 5
		rm -rf /tmp/kidtimer.shutdown.${KID}
		rm -f /tmp/killall.bash.${KID}
		pkill -KILL -u ${KID}
	EOF
}

# Show localized "Done" message
#
# shows: Done message
# returns: nothing
go_echo_error() {
	locale_message 12
}

# Show localized "Error" message
#
# shows: Error message
# returns: nothing
go_echo_done() {
	locale_message 13
}


# reset TTL for an user
#
# shows: nothing
# returns: nothing
reset_time() {
	local KID=$1

	# make sure this kid is in the list to begin with
	if is_configured ${KID}
	then
		get_daily_ttl ${KID} > ${TIME_DIR}/${KID}.ttl
		is_locked ${KID} && passwd ${KID} -u
		go_clean_jobs ${KID}
		go_echo_done
	fi
}

# Add time to an user
#
# shows: nothing
# returns: nothing
go_addtime() {
	local KID=$1
	local TIME=$2

	if is_configured ${KID}
	then
		case ${TIME} in
			reset)
				reset_time ${KID}
				go_echo_done
				;;
			''|*[!0-9]*)
				locale_message 22
				;;
			*)
				set_ttl $(($(get_current_ttl) + ${TIME}))
				is_locked ${KID} && passwd ${KID} -u
				go_clean_jobs ${KID}
		esac
	else
		go_echo_error
		#english: User not setup.
		locale_message 19
	fi
}

# show the TTL of an user
#
# shows: number of remaining minutes
# returns: nothing
get_time() {
	local KID=$1

	if is_configured ${KID}
	then
		get_current_ttl ${KID}
	else
		echo
		#english: User not setup.
		locale_message 19
		echo
	fi
}

# Show the localized message
#
# shows: message
# returns: nothing
locale_message() {
	local MESSAGE_ID=$1

	sed -ne "${MESSAGE_ID}p" /usr/local/kidtimer/locale/$LANG
}

go_tui() {
	local CHOICE=""
	while [ CHOICE -ne 5 ]
	do
		cat <<- EOF
			1) $(locale_message 7)
			2) $(locale_message 8)
			3) $(locale_message 9)
			4) $(locale_message 10)
			5) $(locale_message 11)

			"Choose: "
		EOF

		read CHOICE
		case "${CHOICE}" in
			1) go_setup_user	;;
			2) go_modify_user	;;
			3) go_remove_user	;;
			4) go_list_users	;;
		esac
	done
}


go_list_users() {
	locale_message 14
	if [ ${#KIDS} -gt 0 ]
	then
		echo ${KIDS}
	else
		locale_message 15
	fi
}

go_setup_user() {
	echo
	#english: Username:
	echo -n $(locale_message 16)
	read KID

	if id ${KID} &> /dev/null
	then
		if ! is_configured ${KID}
		then
			cp ${SCHEDULE_DIR}/blank ${SCHEDULE_DIR}/${KID}
			get_daily_ttl ${KID} > ${TIME_DIR}/${KID}.ttl
			echo ${KID} >> ${CONFIG_DIR}/kid.list
			go_echo_done
			echo
			#english: Modify limits now ?(y/n):
			echo -n $(local_message 17)
			read ANSWER
			if [ "${ANSWER}" == "y" ]
			then
				editor ${SCHEDULE_DIR}/${KID}
				reset_time ${KID}
				go_echo_done
			fi
		fi
	else
		go_echo_error
		#english: User does not exist. Please create user using the useradd command first.
		locale_message 18
	fi
}


go_modify_user() {
	echo
	#english: Username:
	echo -n $(locale_message 16)
	read KID
	if is_configured ${KID}
	then
	 	editor ${SCHEDULE_DIR}/${KID}
	else
		go_echo_error
		#english: User not setup.
		locale_message 19
		echo
	fi
}


go_remove_user() {
	echo
	#english: Username:
	echo -n $(locale_message 16)
	read KID
	if is_configured ${KID}
	then
		sed -i "/^${KID}$/d" ${CONFIG_DIR}/kid.list
		go_echo_done
	else
		go_echo_error
		#english: User not setup.
		locale_message 19
		echo
	fi
}


go_help() {
	cat <<-EOF

		Commands:
		--------------------------------------------------------------------------------
		addtime <user> <minutes> ... Increases allowed time for the day.
		gettime <user> ... Prints remaining time for the day.
		reset <user> ... Reset time for the day.
		logout <user> ... Starts logout sequence for user.
		hourly ... Enables/disables user access based on the schedule.
		daily ... Resets time for the new day.
		update ... Updates kidtimer to the latest version.
		info ... Gather local configurations to troubleshoot issues.
		help ... This list.
		--------------------------------------------------------------------------------
	EOF
}

check_dependencies() {
	local MISSING_TOOLS=""
	which at			&>/dev/null || MISSING_TOOLS="${MISSING_TOOLS} at"
	which notify-send	&>/dev/null || MISSING_TOOLS="${MISSING_TOOLS} libnotify-bin"

	if [ -n ${MISSING_TOOLS} ]
	then
		cat <<- EOF
			$(locale_message 20)
			$(locale_message 21)
			sudo apt-get install ${MISSING_TOOLS}
		EOF
		exit 1
	fi
}

get_update() {
	wget -q -O ${INSTALL_PREFIX}/bin/kidtimer ${REPOSITORY_URL}/bin/kidtimer
	chmod a+x /usr/local/bin/kidtimer
	/usr/local/bin/kidtimer update
}

install() {
	for FILE in ${FILES[@]}
	do
		wget -q -O ${INSTALL_PREFIX}/${FILE} ${REPOSITORY_URL}/${FILE}
	done
	ln -s ${INSTALL_PREFIX}/bin/kidtimer /usr/local/bin/kidtimer
	chmod a+x ${INSTALL_PREFIX}/bin/kidtimer
	echo '* * * * * root /usr/local/bin/kidtimer check' > /etc/cron.d/kidtimer
}

uninstall() {
	for KID in ${KIDS[@]}
	do
		is_locked ${KID} && passwd ${KID} -u
	done
	for FILE in ${FILES[@]}
	do
		rm -f ${INSTALL_PREFIX}/${FILE}
	done


###################### Code ####################
################################################

case "$1" in
	"")			check_dependencies && go_tui	;;
	addtime)	go_addtime $2 $3				;;
	reset)		reset_time $2					;;
	gettime)	get_time						;;
	logout)		go_logout $2					;;
	update)		get_update						;;
	check)		go_check						;;
	info)		get_info						;;
	-h)			go_help							;;
	help)		go_help							;;
esac
